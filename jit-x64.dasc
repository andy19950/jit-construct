#include <stdint.h>
#include <string.h>
#include "util.h"


|.arch x64
|.actionlist actions
|
|// Use rbx as our cell pointer.
|// Since rbx is a callee-save register, it will be preserved
|// across our calls to getchar and putchar.
|.define PTR, rbx
|
|// Macro for calling a function.
|// In cases where our target is <=2**32 away we can use
|//   | call &addr
|// But since we don't know if it will be, we use this safe
|// sequence instead.
|.macro callp, addr
|  mov64  rax, (uintptr_t)addr
|  call   rax
|.endmacro

#define Dst &state
#define MAX_NESTING 256

int continuous_count(char *p)
{
    char *ptr = p;
    int count = 0;
    while (*ptr == *p) {
        count++;
        ptr++;
    }
    return count;
}

int check_loops(char *p,int *index,int *mult)
{
    int res,offset = 0,_index = 0;
    if (*(p+1) != '-') return -1;
    p += 2;
    while (*p != ']') {
        if (*p == '[' || *p == '-' ||
            *p == '.' || *p == ',')
            return -1;
        res = continuous_count(p);
        if (*p == '>') offset += res;
        else if (*p == '<') offset -= res;
        else if (*p == '+') {
            index[_index] = offset;
            mult[_index] = res;
            _index++;
        }
        p += res;
   }
   if (offset != 0) return -1;
   return _index;
}

int scan_loop(char *p) {
    int count = 0;
    char dirction = *p;
    if (dirction != '>' && dirction != '<')
        return 0;
    while (*p != ']') {
        if(*p == dirction)
            count++;
        else
            return 0;
        p++;
    }
    return count;
}

int main(int argc, char *argv[])
{
	if (argc < 2) err("Usage: jit-x64 <inputfile>");
	dasm_State *state;
	initjit(&state, actions);

	unsigned int maxpc = 0;
	int pcstack[MAX_NESTING];
	int *top = pcstack, *limit = pcstack + MAX_NESTING;
    int *start = (int *) malloc (sizeof(int));
    int *end = (int *) malloc (sizeof(int));
    int diff;

	// Function prologue.
	|  push PTR
	|  mov  PTR, rdi      // rdi store 1st argument
    

    int count = 1, index[64], mult[64];
    
    for (char *p = read_file(argv[1]); *p; p++) {
        if(*p == '+' || *p == '-' || *p == '>' || *p == '<') {
            count = continuous_count(p);
            p += (count-1);
        }
		switch (*p) {
		case '>':
			|  add  PTR,  count
			break;
		case '<':
			|  sub  PTR,  count
			break;
		case '+':
			|  add  byte [PTR], count
			break;
		case '-':
			|  sub  byte [PTR], count
			break;
		case '.':
			|  movzx edi, byte [PTR]
			|  callp putchar
			break;
		case ',':
			|  callp getchar
			|  mov   byte [PTR], al
			break;
		case '[':
			if (top == limit) err("Nesting too deep.");
			// Each loop gets two pclabels: at the beginning and end.
			// We store pclabel offsets in a stack to link the loop
			// begin and end together.
            
            count = check_loops(p, index, mult);
            for(int i=0; i<count; i++) {
                |  mov  al, mult[i]
                |  imul byte [PTR]
                |  add PTR,  index[i]
                |  add [PTR], al
                |  sub PTR,  index[i]
            }
            
            if (count < 0) {
                count = scan_loop(p+1);
                if(count == 0) {
                    maxpc += 2;
			        *top++ = maxpc;
			        dasm_growpc(&state, maxpc);
			        |  cmp  byte [PTR], 0
			        |  je   =>(maxpc-2)
			        |=>(maxpc-1):
                } else if (*(p+1) == '<') {
                    |  mov  [end], PTR
                    diff = ((void *)end - memrchr(start, 0, end-start+1));
                    |  sub  PTR, diff
/*
                    |  mov  rdx, PTR
                    |  sub  rdx, rdi
                    |  inc  rdx
                    |  mov  eax, 0
                    |  push rdi
                    |  mov  r1, memrchr
                    |  call r1
                    |  mov  rdx, PTR
                    |  sub  rdx, rdi
                    |  sub  PTR, rdx
                    |  pop  rdi
*/
                    p += count+1;
                } else if (*(p+1) == '>') {
                    |  mov [end], PTR
                    diff = (memchr(end, 0, sizeof(*start)) - (void *)end);
                    |  add PTR, diff
/*
                    |  mov rdx, 30000
                    |  mov eax, 0
                    |  push rdi
                    |  mov  rdi, PTR
                    |  mov  r1, memchr
                    |  call r1
                    |  sub  rdi, PTR
                    |  add  PTR, rdi
                    |  pop  rdi
*/
                    p += count+1;
                }
            } else {
                while (*p != ']') {
                    ++p;
                }
                | mov byte [PTR], 0
            }
			break;
		case ']':
			if (top == pcstack) err("Unmatched ']'");
			top--;
			|  cmp  byte [PTR], 0
			|  jne  =>(*top-1)
			|=>(*top-2):
			break;
		}
	}

	// Function epilogue.
	|  pop  PTR
	|  ret
    
    printf("compile successful\n");	
    void (*fptr)(char*) = jitcode(&state);
	char *mem = calloc(30000, 1);
	fptr(mem);
	free(mem);
	free_jitcode(fptr);
	return 0;
}
